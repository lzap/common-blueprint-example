#
# Decisions for the initial version so far:
#
# * Minimum top-level fields (name, description).
# * Prefer minimal nesting (two levels max).
# * Snake case naming for all keys (snake_case).
# * Plurals for composite elements (sequences, mappings).
# * Utilize native YAML data types (e.g. date, time).
# * Utilize default values from JSON Schema (boolean can be true).
#
# We will specify if composer request should be part of bluprint schema or not.

# image request (type) aka compose request (distro, version, arch)
---
compose_request:
  type: "aws"
  distribution:
    name: "fedora"
    version: "42"
  architecture: "x86_84"
#override: # TODO discuss maybe "variables"
  # - activation_key
...
# the blueprint
---
name: "Blueprint name"
description: ""
hostname: "localhost" # XXX: unsure about this, also required or not?
fips:
  enabled: true
dnf:
  packages:
    # anything that DNF library consumes
    - "vim-enhanced"
    - "vim-enhanced-9.1.866-1"
    - "vim-enhanced-9.1.866-1.fc41.x86_64"
    - "@virtualization"
  groups:
    - "virtualization"
  import_keys: true
  modules:
    - "postgres:16/server"
containers:
  - source: "quay.io/fedora/fedora:latest"
    name: "fedora"
    tls_verify: true
    local_storage: "/var/tmp/test"
kernel:
  package: "kernel-debug-6.11.5-300"
  cmdline_append:
    - "nosmt=force"
registration:
  redhat:
    activation_key: "123456789"
    organization: "123456" # XXX should this be org_id instead?
    subscription_manager:
      # internal use only
      enabled: true
      product_plugin: true
      repository_management: true
      auto_registration: true
    insights:
      enabled: true
    connector:
      enabled: true
  fdo:
    manufacturing_server_url: ""
    diun_pub_key_insecure: false
    diun_pub_key_hash: ""
    diun_pub_key_root_certs: ""
    di_mfg_string_type_mac_iface: ""
network:
  firewall: # XXX merge services and ports into one?
    services:
      - service: "ssh"
        protocol: "tcp" # default value
        enabled: true # default value
      - service: "dhcp"
    ports:
      - port: 53
        protocol: "both"
        enabled: false
      - from: 60000
        to: 60010
        protocol: "udp"
# schema done up to this point
accounts:
  users:
    - name: "lzap"
      description: ""
      password: ""
      ssh_keys:
        - "ssh-key 1234"
      home: "/home/lzap"
      shell: "/usr/bin/bash"
      uid: 1001
      gid: 1001
      groups: ["wheel", "operators"]
      expires: 2050-05-13
  groups:
    - name: "operators"
      gid: 1042
timedate:
  timezone: "Europe/Prague"
  ntp_servers: ["0.north-america.pool.ntp.org", "1.north-america.pool.ntp.org"]
locale:
  languages: ["en_US.UTF-8", "cs_CZ.UTF-8"]
  keyboards: ["cz-qwerty", "cz", "us"]
systemd:
  enabled: ["sshd.service", "backup.timer"]
  disabled: ["tuned", "cupsd"]
  masked: []
fsnodes: # new feature (was file/dir)
  - path: "/var/tmp/dir"
    type: "dir" # file as the default (file, dir, symlink)
    state: "present" # the default
    mode: 0755 # 0700 default
    user: "lzap" # 0 default
    group: "lzap" # 0 default
    ensure_parents: true # false default
  - path: "/var/tmp/dir/file1"
    type: "file"
    state: "present"
    mode: 0644
    user: "lzap"
    group: "lzap"
    contents:
      base64: "AA43798kjsdkjhKJDJKhds" # useful for binaries
  - path: "/var/tmp/dir/file2"
    contents:
      text: "test" # useful for text
  - path: "/var/tmp/dir/file3"
    contents:
      ref: "file:///var/tmp/dir/file2" # new feature (could be URL as well)
ignition:
  embedded: ""
  firstboot_url: ""
installer:
  anaconda: # only effective for certain image types
    unattended: true
    sudo_nopassword: ["lzap"]
    enabled_modules: ["org.fedoraproject.Anaconda.Modules.Subscription"]
    disabled_modules: []
    kickstart: ""
  coreos:
    installation_device: "/dev/vda"

repositories:
  - type: "dnf" # the default and the only supported value
    id: ""
    name: ""
    filename: ""
    base_urls: [""]
    mirror_list: ""
    metalink: ""
    gpg_keys: [""]
    gpg_check: true
    gpg_check_repo: true
    priority: 99
    ssl_verify: true
    module_hotfixes: false
    usage:
      install: true # use repo for image build
      configure: true # configure repo for dnf
storage: # applies only to disc images
  type: "gpt" # mbr or gpt
  partitions:
    - type: "plain" # lvm or btrfs
      label: "label"
      mountpoint: "/"
      fs_type: "ext4" # or xfs or swap or vfat
      minsize: "50 GiB"
    - type: "lvm"
      name: "vg_name"
      minsize: "50 GiB"
      logical_volumes:
        - label: "label"
          mountpoint: "/var"
          fs_type: "ext4"
          name: "lv_name"
          minsize: "50 GiB"
    - type: "btrfs"
      minsize: "50 GiB"
      subvolumes:
        - name: "name"
          mountpoint: "/opt/name"

# CUT # CUT # CUT # CUT # CUT # CUT # CUT # CUT # CUT

ostree:
  url: "https://cert.console.stage.redhat.com/api/pulp-content/em652321d/myrhel-2747841137116337868"
  content_url: ""
  ref: "rhel/8/x86_64/edge"
  parent: "rhel/8/x86_64/edge"
  rhsm: true
cacerts: ["xxx"]
# the following is only in hosted mostly from "image_request" (some of the fields moved to image_request)
image:
  client_id: "api"
  size: 4294967296 # bytes (TODO: move it to filesystem section)
  snapshot_date: 2024-05-13
  upload:
    - type: "aws"
      share_with_accounts: ["123456789"]
      share_with_sources: ["12345"]
openscap:
  profile_id: "xccdf_org.ssgproject.content_profile_cis"
  # hosted-only fields
  profile_name: "CIS Red Hat Enterprise Linux 8 Benchmark for Level 2 - Server"
  profile_description: ""
  # on-prem only fields
  datastream: "/usr/share/xml/scap/ssg/content/ssg-rhel8-ds.xml"
  selected: []
  unselected: ["xccdf_org.ssgproject.content_rule_grub2_password"]
  json_tailorings:
    - profile_id: "name-of-profile-used-in-json-tailoring-file"
      filepath:  "/some/path/tailoring-file.json"

# any new features added after we started with this back in November?

# idea: extensions, ability to add custom fields for things that are not supported
# by the schema, but are supported by a backend (e.g. "snapshot_date" for crc). useful
# for transforming common blueprint into a legacy API call.
